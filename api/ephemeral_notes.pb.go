// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.1
// source: ephemeral_notes.proto

package api

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// System-wide note declaration
type Note struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message     string               `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	CreatedAt   *timestamp.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	PublishedAt *timestamp.Timestamp `protobuf:"bytes,3,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
}

func (x *Note) Reset() {
	*x = Note{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ephemeral_notes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Note) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Note) ProtoMessage() {}

func (x *Note) ProtoReflect() protoreflect.Message {
	mi := &file_ephemeral_notes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Note.ProtoReflect.Descriptor instead.
func (*Note) Descriptor() ([]byte, []int) {
	return file_ephemeral_notes_proto_rawDescGZIP(), []int{0}
}

func (x *Note) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Note) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Note) GetPublishedAt() *timestamp.Timestamp {
	if x != nil {
		return x.PublishedAt
	}
	return nil
}

// Response message to StreamNotes call
type StreamNotesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notes []*Note `protobuf:"bytes,1,rep,name=notes,proto3" json:"notes,omitempty"`
}

func (x *StreamNotesResponse) Reset() {
	*x = StreamNotesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ephemeral_notes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamNotesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamNotesResponse) ProtoMessage() {}

func (x *StreamNotesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ephemeral_notes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamNotesResponse.ProtoReflect.Descriptor instead.
func (*StreamNotesResponse) Descriptor() ([]byte, []int) {
	return file_ephemeral_notes_proto_rawDescGZIP(), []int{1}
}

func (x *StreamNotesResponse) GetNotes() []*Note {
	if x != nil {
		return x.Notes
	}
	return nil
}

var File_ephemeral_notes_proto protoreflect.FileDescriptor

var file_ephemeral_notes_proto_rawDesc = []byte{
	0x0a, 0x15, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9a, 0x01, 0x0a, 0x04, 0x4e,
	0x6f, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x22, 0x36, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f,
	0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x32,
	0x78, 0x0a, 0x0e, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x23, 0x0a, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x65,
	0x12, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x1a, 0x09, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x3e, 0x0a, 0x20, 0x6d, 0x65, 0x2e,
	0x61, 0x67, 0x6f, 0x6e, 0x70, 0x65, 0x72, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x2d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x42, 0x11, 0x45,
	0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x41, 0x50, 0x49,
	0x50, 0x01, 0x5a, 0x05, 0x2e, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_ephemeral_notes_proto_rawDescOnce sync.Once
	file_ephemeral_notes_proto_rawDescData = file_ephemeral_notes_proto_rawDesc
)

func file_ephemeral_notes_proto_rawDescGZIP() []byte {
	file_ephemeral_notes_proto_rawDescOnce.Do(func() {
		file_ephemeral_notes_proto_rawDescData = protoimpl.X.CompressGZIP(file_ephemeral_notes_proto_rawDescData)
	})
	return file_ephemeral_notes_proto_rawDescData
}

var file_ephemeral_notes_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_ephemeral_notes_proto_goTypes = []interface{}{
	(*Note)(nil),                // 0: api.Note
	(*StreamNotesResponse)(nil), // 1: api.StreamNotesResponse
	(*timestamp.Timestamp)(nil), // 2: google.protobuf.Timestamp
	(*empty.Empty)(nil),         // 3: google.protobuf.Empty
}
var file_ephemeral_notes_proto_depIdxs = []int32{
	2, // 0: api.Note.created_at:type_name -> google.protobuf.Timestamp
	2, // 1: api.Note.published_at:type_name -> google.protobuf.Timestamp
	0, // 2: api.StreamNotesResponse.notes:type_name -> api.Note
	0, // 3: api.EphemeralNotes.PublishNote:input_type -> api.Note
	3, // 4: api.EphemeralNotes.StreamNotes:input_type -> google.protobuf.Empty
	0, // 5: api.EphemeralNotes.PublishNote:output_type -> api.Note
	1, // 6: api.EphemeralNotes.StreamNotes:output_type -> api.StreamNotesResponse
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_ephemeral_notes_proto_init() }
func file_ephemeral_notes_proto_init() {
	if File_ephemeral_notes_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ephemeral_notes_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Note); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ephemeral_notes_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamNotesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ephemeral_notes_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ephemeral_notes_proto_goTypes,
		DependencyIndexes: file_ephemeral_notes_proto_depIdxs,
		MessageInfos:      file_ephemeral_notes_proto_msgTypes,
	}.Build()
	File_ephemeral_notes_proto = out.File
	file_ephemeral_notes_proto_rawDesc = nil
	file_ephemeral_notes_proto_goTypes = nil
	file_ephemeral_notes_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EphemeralNotesClient is the client API for EphemeralNotes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EphemeralNotesClient interface {
	// Publishes a note to the server
	PublishNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Note, error)
	// Retrieves notes with realtime updates
	StreamNotes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (EphemeralNotes_StreamNotesClient, error)
}

type ephemeralNotesClient struct {
	cc grpc.ClientConnInterface
}

func NewEphemeralNotesClient(cc grpc.ClientConnInterface) EphemeralNotesClient {
	return &ephemeralNotesClient{cc}
}

func (c *ephemeralNotesClient) PublishNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/api.EphemeralNotes/PublishNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ephemeralNotesClient) StreamNotes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (EphemeralNotes_StreamNotesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EphemeralNotes_serviceDesc.Streams[0], "/api.EphemeralNotes/StreamNotes", opts...)
	if err != nil {
		return nil, err
	}
	x := &ephemeralNotesStreamNotesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EphemeralNotes_StreamNotesClient interface {
	Recv() (*StreamNotesResponse, error)
	grpc.ClientStream
}

type ephemeralNotesStreamNotesClient struct {
	grpc.ClientStream
}

func (x *ephemeralNotesStreamNotesClient) Recv() (*StreamNotesResponse, error) {
	m := new(StreamNotesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EphemeralNotesServer is the server API for EphemeralNotes service.
type EphemeralNotesServer interface {
	// Publishes a note to the server
	PublishNote(context.Context, *Note) (*Note, error)
	// Retrieves notes with realtime updates
	StreamNotes(*empty.Empty, EphemeralNotes_StreamNotesServer) error
}

// UnimplementedEphemeralNotesServer can be embedded to have forward compatible implementations.
type UnimplementedEphemeralNotesServer struct {
}

func (*UnimplementedEphemeralNotesServer) PublishNote(context.Context, *Note) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishNote not implemented")
}
func (*UnimplementedEphemeralNotesServer) StreamNotes(*empty.Empty, EphemeralNotes_StreamNotesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamNotes not implemented")
}

func RegisterEphemeralNotesServer(s *grpc.Server, srv EphemeralNotesServer) {
	s.RegisterService(&_EphemeralNotes_serviceDesc, srv)
}

func _EphemeralNotes_PublishNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Note)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EphemeralNotesServer).PublishNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EphemeralNotes/PublishNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EphemeralNotesServer).PublishNote(ctx, req.(*Note))
	}
	return interceptor(ctx, in, info, handler)
}

func _EphemeralNotes_StreamNotes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EphemeralNotesServer).StreamNotes(m, &ephemeralNotesStreamNotesServer{stream})
}

type EphemeralNotes_StreamNotesServer interface {
	Send(*StreamNotesResponse) error
	grpc.ServerStream
}

type ephemeralNotesStreamNotesServer struct {
	grpc.ServerStream
}

func (x *ephemeralNotesStreamNotesServer) Send(m *StreamNotesResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _EphemeralNotes_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.EphemeralNotes",
	HandlerType: (*EphemeralNotesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishNote",
			Handler:    _EphemeralNotes_PublishNote_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamNotes",
			Handler:       _EphemeralNotes_StreamNotes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ephemeral_notes.proto",
}
